// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rentpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RentServiceClient is the client API for RentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RentServiceClient interface {
	BorrowBook(ctx context.Context, in *BorrowBookRequest, opts ...grpc.CallOption) (*BorrowBookReply, error)
	ReturnBook(ctx context.Context, in *ReturnBookRequest, opts ...grpc.CallOption) (*ReturnBookReply, error)
	ListBorrowedBook(ctx context.Context, in *ListBorrowedBookRequest, opts ...grpc.CallOption) (*ListBorrowedBookReply, error)
	ListReturnedBook(ctx context.Context, in *ListReturnedBookRequest, opts ...grpc.CallOption) (*ListReturnedBookReply, error)
	ListBook(ctx context.Context, in *ListBookRequest, opts ...grpc.CallOption) (*ListBookReply, error)
	ListAllBorrowedBook(ctx context.Context, in *ListAllBorrowedBookRequest, opts ...grpc.CallOption) (*ListAllBorrowedBookReply, error)
	ListAllReturnedBook(ctx context.Context, in *ListAllReturnedBookRequest, opts ...grpc.CallOption) (*ListAllReturnedBookReply, error)
	ListAllBookRecords(ctx context.Context, in *ListAllBookRecordsRequest, opts ...grpc.CallOption) (*ListAllBookRecordsReply, error)
}

type rentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRentServiceClient(cc grpc.ClientConnInterface) RentServiceClient {
	return &rentServiceClient{cc}
}

func (c *rentServiceClient) BorrowBook(ctx context.Context, in *BorrowBookRequest, opts ...grpc.CallOption) (*BorrowBookReply, error) {
	out := new(BorrowBookReply)
	err := c.cc.Invoke(ctx, "/sdk.RentService/BorrowBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentServiceClient) ReturnBook(ctx context.Context, in *ReturnBookRequest, opts ...grpc.CallOption) (*ReturnBookReply, error) {
	out := new(ReturnBookReply)
	err := c.cc.Invoke(ctx, "/sdk.RentService/ReturnBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentServiceClient) ListBorrowedBook(ctx context.Context, in *ListBorrowedBookRequest, opts ...grpc.CallOption) (*ListBorrowedBookReply, error) {
	out := new(ListBorrowedBookReply)
	err := c.cc.Invoke(ctx, "/sdk.RentService/ListBorrowedBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentServiceClient) ListReturnedBook(ctx context.Context, in *ListReturnedBookRequest, opts ...grpc.CallOption) (*ListReturnedBookReply, error) {
	out := new(ListReturnedBookReply)
	err := c.cc.Invoke(ctx, "/sdk.RentService/ListReturnedBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentServiceClient) ListBook(ctx context.Context, in *ListBookRequest, opts ...grpc.CallOption) (*ListBookReply, error) {
	out := new(ListBookReply)
	err := c.cc.Invoke(ctx, "/sdk.RentService/ListBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentServiceClient) ListAllBorrowedBook(ctx context.Context, in *ListAllBorrowedBookRequest, opts ...grpc.CallOption) (*ListAllBorrowedBookReply, error) {
	out := new(ListAllBorrowedBookReply)
	err := c.cc.Invoke(ctx, "/sdk.RentService/ListAllBorrowedBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentServiceClient) ListAllReturnedBook(ctx context.Context, in *ListAllReturnedBookRequest, opts ...grpc.CallOption) (*ListAllReturnedBookReply, error) {
	out := new(ListAllReturnedBookReply)
	err := c.cc.Invoke(ctx, "/sdk.RentService/ListAllReturnedBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentServiceClient) ListAllBookRecords(ctx context.Context, in *ListAllBookRecordsRequest, opts ...grpc.CallOption) (*ListAllBookRecordsReply, error) {
	out := new(ListAllBookRecordsReply)
	err := c.cc.Invoke(ctx, "/sdk.RentService/ListAllBookRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RentServiceServer is the server API for RentService service.
// All implementations must embed UnimplementedRentServiceServer
// for forward compatibility
type RentServiceServer interface {
	BorrowBook(context.Context, *BorrowBookRequest) (*BorrowBookReply, error)
	ReturnBook(context.Context, *ReturnBookRequest) (*ReturnBookReply, error)
	ListBorrowedBook(context.Context, *ListBorrowedBookRequest) (*ListBorrowedBookReply, error)
	ListReturnedBook(context.Context, *ListReturnedBookRequest) (*ListReturnedBookReply, error)
	ListBook(context.Context, *ListBookRequest) (*ListBookReply, error)
	ListAllBorrowedBook(context.Context, *ListAllBorrowedBookRequest) (*ListAllBorrowedBookReply, error)
	ListAllReturnedBook(context.Context, *ListAllReturnedBookRequest) (*ListAllReturnedBookReply, error)
	ListAllBookRecords(context.Context, *ListAllBookRecordsRequest) (*ListAllBookRecordsReply, error)
	mustEmbedUnimplementedRentServiceServer()
}

// UnimplementedRentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRentServiceServer struct {
}

func (UnimplementedRentServiceServer) BorrowBook(context.Context, *BorrowBookRequest) (*BorrowBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrowBook not implemented")
}
func (UnimplementedRentServiceServer) ReturnBook(context.Context, *ReturnBookRequest) (*ReturnBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnBook not implemented")
}
func (UnimplementedRentServiceServer) ListBorrowedBook(context.Context, *ListBorrowedBookRequest) (*ListBorrowedBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBorrowedBook not implemented")
}
func (UnimplementedRentServiceServer) ListReturnedBook(context.Context, *ListReturnedBookRequest) (*ListReturnedBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReturnedBook not implemented")
}
func (UnimplementedRentServiceServer) ListBook(context.Context, *ListBookRequest) (*ListBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBook not implemented")
}
func (UnimplementedRentServiceServer) ListAllBorrowedBook(context.Context, *ListAllBorrowedBookRequest) (*ListAllBorrowedBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllBorrowedBook not implemented")
}
func (UnimplementedRentServiceServer) ListAllReturnedBook(context.Context, *ListAllReturnedBookRequest) (*ListAllReturnedBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllReturnedBook not implemented")
}
func (UnimplementedRentServiceServer) ListAllBookRecords(context.Context, *ListAllBookRecordsRequest) (*ListAllBookRecordsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllBookRecords not implemented")
}
func (UnimplementedRentServiceServer) mustEmbedUnimplementedRentServiceServer() {}

// UnsafeRentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RentServiceServer will
// result in compilation errors.
type UnsafeRentServiceServer interface {
	mustEmbedUnimplementedRentServiceServer()
}

func RegisterRentServiceServer(s grpc.ServiceRegistrar, srv RentServiceServer) {
	s.RegisterService(&_RentService_serviceDesc, srv)
}

func _RentService_BorrowBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentServiceServer).BorrowBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.RentService/BorrowBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentServiceServer).BorrowBook(ctx, req.(*BorrowBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentService_ReturnBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentServiceServer).ReturnBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.RentService/ReturnBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentServiceServer).ReturnBook(ctx, req.(*ReturnBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentService_ListBorrowedBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBorrowedBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentServiceServer).ListBorrowedBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.RentService/ListBorrowedBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentServiceServer).ListBorrowedBook(ctx, req.(*ListBorrowedBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentService_ListReturnedBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReturnedBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentServiceServer).ListReturnedBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.RentService/ListReturnedBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentServiceServer).ListReturnedBook(ctx, req.(*ListReturnedBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentService_ListBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentServiceServer).ListBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.RentService/ListBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentServiceServer).ListBook(ctx, req.(*ListBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentService_ListAllBorrowedBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllBorrowedBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentServiceServer).ListAllBorrowedBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.RentService/ListAllBorrowedBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentServiceServer).ListAllBorrowedBook(ctx, req.(*ListAllBorrowedBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentService_ListAllReturnedBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllReturnedBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentServiceServer).ListAllReturnedBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.RentService/ListAllReturnedBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentServiceServer).ListAllReturnedBook(ctx, req.(*ListAllReturnedBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentService_ListAllBookRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllBookRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentServiceServer).ListAllBookRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.RentService/ListAllBookRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentServiceServer).ListAllBookRecords(ctx, req.(*ListAllBookRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sdk.RentService",
	HandlerType: (*RentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BorrowBook",
			Handler:    _RentService_BorrowBook_Handler,
		},
		{
			MethodName: "ReturnBook",
			Handler:    _RentService_ReturnBook_Handler,
		},
		{
			MethodName: "ListBorrowedBook",
			Handler:    _RentService_ListBorrowedBook_Handler,
		},
		{
			MethodName: "ListReturnedBook",
			Handler:    _RentService_ListReturnedBook_Handler,
		},
		{
			MethodName: "ListBook",
			Handler:    _RentService_ListBook_Handler,
		},
		{
			MethodName: "ListAllBorrowedBook",
			Handler:    _RentService_ListAllBorrowedBook_Handler,
		},
		{
			MethodName: "ListAllReturnedBook",
			Handler:    _RentService_ListAllReturnedBook_Handler,
		},
		{
			MethodName: "ListAllBookRecords",
			Handler:    _RentService_ListAllBookRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rentpb/service.proto",
}
